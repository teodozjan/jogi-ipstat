#!perl6 -w



=head1 NAME

  jogi - an perl program exmaining syslog files and sorting it by ip

=cut

use v6;

#use Getopt::Long;
#Getopt::Long::Configure('bundling');

use Jogi::Regex;

my $service;
my $silent;
my %results;

#GetOptions(
#	   "s|silent" => \$silent,
#	   "h|help" => \&help,
#	   "t|type=s" => \$service,
#	   );
#my $path = shift || "-";
my $path = "/var/log/syslog";

say "Run with --help for help\nUsing $path" unless $silent;

my $log = open $path or die "Could not open \"$path\" :$!";


for $log.lines -> $line
{
    next unless $line ~~ Jogi::Regex.ip;
    say $line;

    #push(@(%results{$1}),$_);
}
close(LOG);

B<=begin pod>
=head1 SYNOPSIS

B<jogi> [B<-rnbg>] filename
B<jogi> [B<long options>] filename

=head1 DESCRIPTION

Jogi logfile anaylyzer is perl program that searches given
logfile(by filename or pipe) for B<IP adressess> and prints it to B<stdout>.
There are some options available I<the long> ones and their I<short equivalents>.

  
=head1 OPTIONS

=over 4

=item B<-t>, B<--type>

Changes regex. Available things are B<syslog>(default), B<vsftpd>, B<exim>, B<>

=item B<-h>, B<--help>

Simple but useless help message 

=item B<-s>, B<--silent>

Turns on B<silent mode>. You don't see boring info messages and warnings. Very useful.


=back

=head1 FILTERING

grep man! grep!

=cut
B=<end pod>


sub help{
print <<EOF

You can mix some of these options if you want to
Usage:
$0 -s /logdir/logfile

Try man $0 or perldoc $0 

EOF
;
exit();
}
#############ENGINE###############
for (keys %results){
    say $_, ":\n", "-" x 80;

    parse_log(@{$results{$_}});

}


